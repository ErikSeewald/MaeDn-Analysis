        -:    0:Source:C:/Users/Erik/Desktop/MaeDn-Analysis/MaeDnBruteForcer/brute_forcer.c
        -:    0:Graph:C:\Users\Erik\Desktop\MaeDn-Analysis\MaeDnBruteForcer\cmake-build-debug-coverage\CMakeFiles\MaeDnBruteForcer.dir\brute_forcer.c.gcno
        -:    0:Data:C:\Users\Erik\Desktop\MaeDn-Analysis\MaeDnBruteForcer\cmake-build-debug-coverage\CMakeFiles\MaeDnBruteForcer.dir\brute_forcer.c.gcda
        -:    0:Runs:1
        -:    1:#include "brute_forcer.h"
        -:    2:
        -:    3://-------------DISTANCES-------------
        -:    4:
function convert_units_to_cm called 1 returned 100% blocks executed 100%
        1:    5:double convert_units_to_cm(int units)
        -:    6:{
        1:    7:    return (double) units * side_length_cm/side_length_units;
        1:    7-block  0
        -:    8:}
        -:    9:
        -:   10:
        -:   11:/**
        -:   12: * Calculates the coordinates of the position index
        -:   13: * and puts them into the given array
        -:   14: * INDEX: 0-3: waiting | 4-43: board location | 44-47: a,b,c,d
        -:   15: */
function get_coords called 280 returned 100% blocks executed 100%
      280:   16:void get_coords(int index, int coords[])
        -:   17:{
      280:   18:    coords[0] = start_pos_X;
      280:   19:    coords[1] = start_pos_Y;
        -:   20:
        -:   21:    //WALK ALONG GAME PATH
      280:   22:    int i = 0;
     6580:   23:    while (i < index)
      280:   23-block  0
     6580:   23-block  1
branch  0 taken 6300
branch  1 taken 280 (fallthrough)
        -:   24:    {
     6300:   25:        if (i < 4) {coords[1] -= tile_distance;}
     6300:   25-block  0
branch  0 taken 1100 (fallthrough)
branch  1 taken 5200
     1100:   25-block  1
     5200:   26:        else if (i < 8) {coords[0] -= tile_distance;}
     5200:   26-block  0
branch  0 taken 1021 (fallthrough)
branch  1 taken 4179
     1021:   26-block  1
     4179:   27:        else if (i < 10) {coords[1] -= tile_distance;}
     4179:   27-block  0
branch  0 taken 469 (fallthrough)
branch  1 taken 3710
      469:   27-block  1
     3710:   28:        else if (i < 14) {coords[0] += tile_distance;}
     3710:   28-block  0
branch  0 taken 854 (fallthrough)
branch  1 taken 2856
      854:   28-block  1
     2856:   29:        else if (i < 18) {coords[1] -= tile_distance;}
     2856:   29-block  0
branch  0 taken 742 (fallthrough)
branch  1 taken 2114
      742:   29-block  1
     2114:   30:        else if (i < 20) {coords[0] += tile_distance;}
     2114:   30-block  0
branch  0 taken 329 (fallthrough)
branch  1 taken 1785
      329:   30-block  1
     1785:   31:        else if (i < 24) {coords[1] += tile_distance;}
     1785:   31-block  0
branch  0 taken 574 (fallthrough)
branch  1 taken 1211
      574:   31-block  1
     1211:   32:        else if (i < 28) {coords[0] += tile_distance;}
     1211:   32-block  0
branch  0 taken 462 (fallthrough)
branch  1 taken 749
      462:   32-block  1
      749:   33:        else if (i < 30) {coords[1] += tile_distance;}
      749:   33-block  0
branch  0 taken 189 (fallthrough)
branch  1 taken 560
      189:   33-block  1
      560:   34:        else if (i < 34) {coords[0] -= tile_distance;}
      560:   34-block  0
branch  0 taken 294 (fallthrough)
branch  1 taken 266
      294:   34-block  1
      266:   35:        else if (i < 38) {coords[1] += tile_distance;}
      266:   35-block  0
branch  0 taken 182 (fallthrough)
branch  1 taken 84
      182:   35-block  1
       84:   36:        else if (i < 39) {coords[0] -= tile_distance;}
       84:   36-block  0
branch  0 taken 28 (fallthrough)
branch  1 taken 56
       28:   36-block  1
       56:   37:        else {coords[1] -= tile_distance;}
       56:   37-block  0
     6300:   38:        i++;
     6300:   38-block  0
        -:   39:    }
      280:   40:}
        -:   41:
        -:   42:
        -:   43:/**
        -:   44: * Calculates the distances (in units) from one position to another and fills up the distances
        -:   45: * array as specified in it's declaration
        -:   46: */
function calculate_distances called 1 returned 100% blocks executed 100%
        1:   47:void calculate_distances()
        -:   48:{
        -:   49:    int from[2], to[2], vec[2];
       41:   50:    for (int i = 0; i < 40; i++)
        1:   50-block  0
       40:   50-block  1
       41:   50-block  2
branch  0 taken 40
branch  1 taken 1 (fallthrough)
        -:   51:    {
       40:   52:        get_coords(i, from);
       40:   52-block  0
call    0 returned 40
      280:   53:        for (int j = 0; j < 6; j++)
      280:   53-block  0
branch  0 taken 240
branch  1 taken 40 (fallthrough)
        -:   54:        {
      240:   55:            get_coords(i+j+1, to);
      240:   55-block  0
call    0 returned 240
      240:   56:            vec[0] = (int16_t) (to[0] - from[0]);
      240:   57:            vec[1] = (int16_t) (to[1] - from[1]);
      240:   58:            distances[i*6 + j] = round(sqrt(vec[0] * vec[0] + vec[1] * vec[1]));
        -:   59:        }
        -:   60:    }
        1:   61:}
        -:   62:
        -:   63:
        -:   64:/**
        -:   65: * Retrieves distance between two positions from the precalculated distances array.
        -:   66: * Function fails if "from" has not been through the piece_extractor
        -:   67: * ( = it's bit board can only have a single non-zero digit)
        -:   68: * @param from the bit board of the starting position
        -:   69: * @param roll_num the number rolled -> used to find the bit board to land on
        -:   70: * @return distance in units
        -:   71: */
function get_distance called 18604129 returned 100% blocks executed 100%
 18604129:   72:int get_distance(int64_t from, int roll_num)
        -:   73:{
 18604129:   74:    int from_index = 0;
467918832:   75:    while(!(from & starting_board))
 18604129:   75-block  0
467918832:   75-block  1
branch  0 taken 449314703
branch  1 taken 18604129 (fallthrough)
        -:   76:    {
449314703:   77:        from <<= 1;
449314703:   78:        from_index++;
449314703:   78-block  0
        -:   79:    }
 18604129:   80:    from_index--;
        -:   81:
 18604129:   82:    int distance = distances[from_index * 6 + (roll_num-1)];
 18604129:   83:    return distance;
 18604129:   83-block  0
        -:   84:}
        -:   85:
        -:   86://-------------PATH-------------
        -:   87:
function print_binary called 36 returned 100% blocks executed 100%
       36:   88:void print_binary(int64_t board)
        -:   89:{
        -:   90:    //PRINT IN BINARY
     2340:   91:    for (int j = sizeof(int64_t) * 8 - 1; j >= 0; j--)
       36:   91-block  0
     2340:   91-block  1
branch  0 taken 2304
branch  1 taken 36 (fallthrough)
        -:   92:    {
     2304:   93:        int64_t bin = (board >> j) & 1;
     2304:   94:        printf("%" PRId64, bin);
     2304:   94-block  0
call    0 returned 2304
        -:   95:    }
       36:   96:    printf("\n");
       36:   96-block  0
call    0 returned 36
       36:   97:}
        -:   98:
        -:   99:/**
        -:  100: * Unwraps the path bitboards into single piece bitboards and
        -:  101: * prints the path history step by step
        -:  102: */
function print_path called 1 returned 100% blocks executed 100%
        1:  103:void print_path()
        -:  104:{
        -:  105:    static int64_t abcd_masks[4] =
        -:  106:            {0b00010000000000000000, 0b00100000000000000000, 0b01000000000000000000, 0b10000000000000000000};
        -:  107:
        1:  108:    printf("\nPath: \n");
        1:  108-block  0
call    0 returned 1
        -:  109:
        -:  110:    int64_t cur_piece;
        -:  111:    int64_t cur_path;
        -:  112:
        5:  113:    for (int i = 0; i < 4; i++)
        5:  113-block  0
branch  0 taken 4
branch  1 taken 1 (fallthrough)
        -:  114:    {
        4:  115:        cur_path = full_path[i];
        4:  116:        cur_piece = extract_piece(cur_path, EXTRACT_LEFTMOST);
        4:  116-block  0
call    0 returned 4
       36:  117:        while(cur_piece != NULL_BOARD)
       36:  117-block  0
branch  0 taken 32
branch  1 taken 4 (fallthrough)
        -:  118:        {
        -:  119:            //Remove all pieces that are not on standby or already finished as declared by
        -:  120:            //abcd_masks[i] and only place cur_piece
       32:  121:            print_binary((cur_path&~piece_extractor)&~abcd_masks[i] | cur_piece);
       32:  121-block  0
call    0 returned 32
        -:  122:
       32:  123:            cur_path ^= cur_piece; //remove cur_piece from cur_path
       32:  124:            cur_piece = extract_piece(cur_path, EXTRACT_LEFTMOST);
call    0 returned 32
        -:  125:        }
        4:  126:        print_binary(cur_path&~piece_extractor); //print finish step
        4:  126-block  0
call    0 returned 4
        -:  127:    }
        1:  128:}
        -:  129:
        -:  130:
        -:  131:/*
        -:  132: * Extracts the piece_mask for the rightmost non-finished piece
        -:  133: * which, in the recursive call chain of handle_piece(), is the piece the function
        -:  134: * currently needs to work with while all the others are just path history.
        -:  135: */
function extract_piece called 18526887 returned 100% blocks executed 100%
 18526887:  136:int64_t extract_piece(int64_t path, int operation_flag)
        -:  137:{
 18526887:  138:    int64_t piece_mask = path & piece_extractor;
 18526887:  139:    if (piece_mask == NULL_BOARD) {return NULL_BOARD;}
 18526887:  139-block  0
branch  0 taken 4 (fallthrough)
branch  1 taken 18526883
        4:  139-block  1
        -:  140:
        -:  141:    int64_t extracted;
        -:  142:
 18526883:  143:    if (operation_flag == EXTRACT_RIGHTMOST)
 18526883:  143-block  0
branch  0 taken 18526851 (fallthrough)
branch  1 taken 32
        -:  144:    {
 18526851:  145:        extracted = tile_40;
248383062:  146:        while (!(extracted&piece_mask)) {extracted <<= 1;}
 18526851:  146-block  0
229856211:  146-block  1
248383062:  146-block  2
branch  0 taken 229856211
branch  1 taken 18526851
        -:  147:    }
        -:  148:
        -:  149:    else
        -:  150:    {
       32:  151:        extracted = tile_1;
      632:  152:        while (!(extracted&piece_mask)) {extracted >>= 1;}
       32:  152-block  0
      600:  152-block  1
      632:  152-block  2
branch  0 taken 600
branch  1 taken 32 (fallthrough)
        -:  153:    }
        -:  154:
 18526883:  155:    return extracted;
 18526883:  155-block  0
        -:  156:}
        -:  157:
        -:  158:/**
        -:  159: * Finds the shortest path for bringing a single piece inside the piece_mask
        -:  160: * (in the bitboard) to the rightmost still empty a,b,c,d tile by updating
        -:  161: * the path history bit board in it's recursive call chain.
        -:  162: * @param path bit board with all previously taken step digits turned on + current distance
        -:  163: * @return Shortest path length in units
        -:  164: */
function handle_piece called 18526851 returned 100% blocks executed 100%
 18526851:  165:void handle_piece(int64_t path)
        -:  166:{
 18526851:  167:    int64_t piece_mask = extract_piece(path, EXTRACT_RIGHTMOST);
 18526851:  167-block  0
call    0 returned 18526851
        -:  168:
        -:  169:    //CHECK IF PATH CAN EVEN STILL BE SHORTER THAN cur_shortest
 18526851:  170:    int tiles_left = 0;
 18526851:  171:    int64_t temp_piece_mask = piece_mask;
333537523:  172:    while(!(temp_piece_mask&(path&abcd_mask|distance_mask)))
333537523:  172-block  0
branch  0 taken 315010672
branch  1 taken 18526851 (fallthrough)
        -:  173:    {
315010672:  174:        temp_piece_mask >>= 1;
315010672:  175:        tiles_left++;
315010672:  175-block  0
        -:  176:    }
 18526851:  177:    tiles_left--;
        -:  178:
 18526851:  179:    if ((path & distance_mask) + tiles_left*min_units_per_tile  > cur_shortest)
 18526851:  179-block  0
branch  0 taken 15422842 (fallthrough)
branch  1 taken 3104009
 15422842:  180:    {return;}
 15422842:  180-block  0
        -:  181:
        -:  182:    //count down - counting up would cause it to enter branches that
        -:  183:    //will be cut off anyway if a higher roll reaches the goal immediately
 21705346:  184:    for (int i = 6; i > 0; i--)
  3104009:  184-block  0
 18601337:  184-block  1
 21705346:  184-block  2
branch  0 taken 18605322
branch  1 taken 3100024 (fallthrough)
        -:  185:    {
 18605322:  186:        int64_t roll = piece_mask >> i;
        -:  187:
        -:  188:        // skip if roll enters last 16 bits or lands on a finished piece
 18605322:  189:        if ((roll & (distance_mask|path))) {continue;}
 18605322:  189-block  0
branch  0 taken 1193 (fallthrough)
branch  1 taken 18604129
     1193:  189-block  1
        -:  190:
 18604129:  191:        int dist = get_distance(piece_mask, i);
 18604129:  191-block  0
call    0 returned 18604129
        -:  192:
 18604129:  193:        if (roll & abcd_mask)
branch  0 taken 77282 (fallthrough)
branch  1 taken 18526847
        -:  194:        {
        -:  195:            //Check if roll lands on the rightmost empty position
        -:  196:            //i.e piece shifted 1 to the right overlaps with rightmost finished piece or distance mask
    77282:  197:            if ((roll >> 1) & (path|distance_mask))
    77282:  197-block  0
branch  0 taken 3985 (fallthrough)
branch  1 taken 73297
        -:  198:            {
     3985:  199:                int new_length = (int) (path & distance_mask) + dist;
        -:  200:
     3985:  201:                if (new_length < cur_shortest)
     3985:  201-block  0
branch  0 taken 48 (fallthrough)
branch  1 taken 3937
        -:  202:                {
       48:  203:                    full_path[full_path_index] = (path | roll) + dist;
       48:  204:                    cur_shortest = new_length;
       48:  204-block  0
        -:  205:                }
     3985:  206:                return;
     3985:  206-block  0
        -:  207:            }
        -:  208:        }
        -:  209:        else
        -:  210:        {
 18526847:  211:            handle_piece((path | roll) + dist); //Handle current rolls subtree
 18526847:  211-block  0
call    0 returned 18526847
        -:  212:        }
        -:  213:    }
        -:  214:}
        -:  215:
        -:  216:
        -:  217:/**
        -:  218: * Find the shortest *physical* path to win, assuming
        -:  219: * that the pieces can move in straight lines to their rolled
        -:  220: * positions.
        -:  221: * Also fills out the the int64_t path bit board.
        -:  222: *
        -:  223: * @return Length of shortest path in units
        -:  224: */
function find_shortest_path called 1 returned 100% blocks executed 92%
        1:  225:int find_shortest_path()
        -:  226:{
        1:  227:    int path_length = total_movement_to_A; // all piece movements to starting point A combined
        -:  228:
        -:  229:    // As explained in the pdf, we only need to perform a
        -:  230:    // search for each of the pieces individually instead of successively
        -:  231:    // as they do not get in the way of each other
        -:  232:
        -:  233:    int64_t start_board;
        5:  234:    while (full_path_index < 4)
        1:  234-block  0
        5:  234-block  1
branch  0 taken 4
branch  1 taken 1 (fallthrough)
        -:  235:    {
        4:  236:        switch (full_path_index)
        4:  236-block  0
branch  0 taken 1
branch  1 taken 1
branch  2 taken 1
branch  3 taken 1
branch  4 taken 0
        -:  237:        {
        1:  238:            case 0: start_board = start_p1;break;
        1:  238-block  0
        1:  239:            case 1: start_board = start_p2; break;
        1:  239-block  0
        1:  240:            case 2: start_board = start_p3; break;
        1:  240-block  0
        1:  241:            case 3: start_board = start_p4; break;
        1:  241-block  0
    #####:  242:            default: break;
    %%%%%:  242-block  0
        -:  243:        }
        4:  244:        handle_piece(start_board);
        4:  244-block  0
call    0 returned 4
        4:  245:        path_length += cur_shortest;
        4:  246:        printf("%d\n", cur_shortest);
call    0 returned 4
        4:  247:        cur_shortest = distance_mask; //RESET
        4:  248:        full_path_index++;
        -:  249:    }
        -:  250:
        1:  251:    return path_length;
        1:  251-block  0
        -:  252:}
        -:  253:
        -:  254:
function main called 1 returned 100% blocks executed 100%
        1:  255:int main()
        -:  256:{
        1:  257:    clock_t start_time = clock();
        1:  257-block  0
call    0 returned 1
        1:  258:    calculate_distances();
call    0 returned 1
        1:  259:    int units = find_shortest_path();
call    0 returned 1
        -:  260:
        -:  261:    //RUNTIME
        1:  262:    double elapsed_time = (double) (clock() - start_time) / CLOCKS_PER_SEC;
call    0 returned 1
        1:  263:    printf("Brute forcer runtime: %f seconds \n", elapsed_time);
call    0 returned 1
        -:  264:
        -:  265:
        -:  266:    //PATH LENGTH IN UNITS
        1:  267:    printf("The shortest path on a %dx%d units board is %d units long. \n", side_length_units, side_length_units, units);
call    0 returned 1
        -:  268:
        -:  269:    //PATH LENGTH IN CM
        1:  270:    double cm = convert_units_to_cm(units);
call    0 returned 1
        1:  271:    printf("The shortest path on a %dx%d cm board is %f cm long. \n", side_length_cm, side_length_cm, cm);
call    0 returned 1
        -:  272:
        -:  273:    //FULL PATH
        1:  274:    print_path();
call    0 returned 1
        -:  275:
        1:  276:    return 0;
        -:  277:}
